import { V as VerificationLevel, I as IDKitConfig } from './config-325e0567.js';
export { A as AbiEncodedValue, C as CredentialType } from './config-325e0567.js';
import * as zustand from 'zustand';

declare enum AppErrorCodes {
    ConnectionFailed = "connection_failed",
    VerificationRejected = "verification_rejected",
    MaxVerificationsReached = "max_verifications_reached",
    CredentialUnavailable = "credential_unavailable",
    MalformedRequest = "malformed_request",
    InvalidNetwork = "invalid_network",
    InclusionProofFailed = "inclusion_proof_failed",
    InclusionProofPending = "inclusion_proof_pending",
    UnexpectedResponse = "unexpected_response",// NOTE: when the World app returns an unexpected response
    FailedByHostApp = "failed_by_host_app",// NOTE: Host app failed/rejected verification (does not come from World App / simulator)
    GenericError = "generic_error"
}
declare enum VerificationState {
    PreparingClient = "loading_widget",
    WaitingForConnection = "awaiting_connection",// Awaiting connection from the wallet
    WaitingForApp = "awaiting_app",// Awaiting user confirmation in wallet
    Confirmed = "confirmed",
    Failed = "failed"
}

interface ISuccessResult {
    proof: string;
    merkle_root: string;
    nullifier_hash: string;
    verification_level: VerificationLevel;
}
interface IErrorState {
    code: AppErrorCodes;
    message?: string;
}

type WorldBridgeStore = {
    bridge_url: string;
    iv: Uint8Array | null;
    key: CryptoKey | null;
    requestId: string | null;
    connectorURI: string | null;
    result: ISuccessResult | null;
    errorCode: AppErrorCodes | null;
    verificationState: VerificationState;
    createClient: (config: IDKitConfig) => Promise<void>;
    pollForUpdates: () => Promise<void>;
    reset: () => void;
};
declare const useWorldBridgeStore: zustand.UseBoundStore<zustand.StoreApi<WorldBridgeStore>>;

declare const DEFAULT_VERIFICATION_LEVEL = VerificationLevel.Orb;
/**
 * @dev use to convert verification level to accepted credential types for proof request
 * @param verification_level
 * @returns
 */
declare const verification_level_to_credential_types: (verification_level: VerificationLevel) => string[];

export { AppErrorCodes, DEFAULT_VERIFICATION_LEVEL, IDKitConfig, IErrorState, ISuccessResult, VerificationLevel, VerificationState, WorldBridgeStore, useWorldBridgeStore, verification_level_to_credential_types };
